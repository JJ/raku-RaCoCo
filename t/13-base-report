use Test;
use lib 'lib';
use Racoco::Report;
use Racoco::UtilTmpFile;
use Racoco::Constants;

plan 1;

constant tmp-file = Racoco::UtilTmpFile;
END { tmp-file::clean-up }

my $source = tmp-file::create-dir($*TMPDIR.add('racoco-test'));
my $lib = $source.add('lib');
my $report-path = $source.add($DOT-RACOCO).add($REPORT-TXT);

my %possible-lines %{
  'AllGreen' => (1, 3, 5).Set,
  'AllRed' => (2, 4, 6).Set
  'GreenRed' => (7, 8),
  'WithPurple' => (1, 2, 4).Set,
  'Empty' => ().Set
}

my %covered-lines = %{
  'AllGreen' => (1, 3, 5).Set,
  'GreenRed' => (7),
  'WithPurple' => (1, 3).Set,
}

my $report-content = q:to/END/;
  55%
  AllGreen
  100%
  green 1 2 5
  AllRed
  0%
  red 2 4 6
  GreenRed
  50%
  green 7
  red 8
  WithPurple
  67%
  green 1
  red 2 4
  purple 3
  END

my %report-data = %(
  AllGreen => %{ green => (1, 2, 5), red => (), purple => () }
  AllRed => %{ green => (), red => (2, 4, 6), purple => () }
  GreenRed => %{ green => (7,), red => (8,), purple => () }
  WithPurple => %{ green => (1,), red => (2, 4), purple => (3, ) }
)

my $report = BaseReport.new($lib);
$report.write();

is $report-path.slurp, $report-content, 'write base report ok';


done-testing